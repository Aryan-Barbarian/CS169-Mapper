var Mapper = (function () {
// nothing here can be tested, keep it simple
  var apiUrl = ""

  var varList = ["Employment","Income","Labor Participation","Sex","Age"];
  var geoList = ["USA", "Alabama", 
                  "Alaska", 
                  "Arizona",
                  "Arkansas", 
                  "California", 
                  "Colorado", 
                  "Connecticut", 
                  "Delaware",
                  "Florida", 
                  "Georgia", 
                  "Hawaii", 
                  "Idaho", 
                  "Illinois", 
                  "Indiana", 
                  "Iowa", 
                  "Kansas", 
                  "Kentucky", 
                  "Louisiana", 
                  "Maine", 
                  "Maryland", 
                  "Massachusetts", 
                  "Michigan", 
                  "Minnesota", 
                  "Mississippi", 
                  "Missouri", 
                  "Montana Nebraska", 
                  "Nevada", 
                  "New Hampshire", 
                  "New Jersey", 
                  "New Mexico", 
                  "New York", 
                  "North Carolina", 
                  "North Dakota", 
                  "Ohio", 
                  "Oklahoma", 
                  "Oregon", 
                  "Pennsylvania Rhode Island", 
                  "South Carolina", 
                  "South Dakota", 
                  "Tennessee", 
                  "Texas", 
                  "Utah", 
                  "Vermont", 
                  "Virginia", 
                  "Washington", 
                  "West Virginia", 
                  "Wisconsin", 
                  "Wyoming"]

  var displayval; //string
  var filterval; //string
  var geoval; //string

  
  //methods dealing with front end

  var startAutocomplete = function() {
    $("#idvar").autocomplete({source: varList});
    $("#idfilteringvar").autocomplete({source: varList});
    //$("#idgeo").autocomplete({source: geoList});
  }

  var submitClickHandler = function() {
      $( "body" ).on( "click", "#idsubmit", function() {
        //set values
        apiUrl = MapperBack.getapiUrl();
        displayval = $("#idvar").val();
        filterval = $("#idfilteringvar").val();
        geoval = $("#idfilteringvar").val();

        //set URL
        apiUrl += '&display_val=' + displayval.toUpperCase().replace(' ', '_');
        if (filterval) '&filter_val=' + filterval.toUpperCase().replace(' ', '_');

        //hide stuff
        $("div#canvas").html('');
        $("div#secondContainer").removeClass('hidden');
        $("div#firstContainer").addClass('hidden');
        $("div#idnavcontainer").append($( "#idvar" ));
        //$("div#idnavcontainer").append($( "#idfilteringvar" ));
        //$("div#idnavcontainer").append($( "#idrange" ));
        //$("div#idnavcontainer").append($( "#idgeo" ));
        $("div#idnavcontainer").append($( "#idsubmit" ));
        $( "#idvar" ).removeClass('col-xs-offset-4 col-xs-4 firstDisplay');
        $( "#idfilteringvar" ).removeClass('col-xs-offset-4 col-xs-4 firstDisplay');
        $( "#idrange" ).removeClass('col-xs-offset-4 col-xs-4 firstDisplay').css({
            display: "inline",
            width: "15%"
        });
        $( "#idgeo" ).removeClass('col-xs-offset-4 col-xs-4 firstDisplay');
        $( "#idsubmit" ).removeClass('col-xs-offset-4 col-xs-4 firstDisplay');
        start();

    });
  }

      /**
    * HTTP GET request 
    * @param  {string}   url       URL path, e.g. "/api/smiles"
    * @param  {function} onSuccess   callback method to execute upon request success (200 status)
    * @param  {function} onFailure   callback method to execute upon request failure (non-200 status)
    * @return {None}
    */
  var makeGetRequest = function(url, onSuccess, onFailure) {
    $.ajax({
      type: 'GET',
      url: url,
      dataType: "json",
      success: onSuccess,
      error: onFailure
    });
  };

  //Methods dealing with the map
  //adds title to our graph
  var addTitle = function(svg)
  {
    svg.append("text")
        .attr("x", 100)             
        .attr("y", 50)
        .attr("text-anchor", "middle")  
        .style("font-size", "16px") 
        .style("text-decoration", "underline")  
        .text("Make me a pretty title");
  }

  //add the legend to the plot
  var addLegend = function (svg) 
  {
    //improve this 
    //legend should show each color and what range its for
    // heres an example http://bl.ocks.org/ZJONSSON/3918369
    var legend = svg.append("g")
    .attr("class", "legend")
    .attr("x", 65)
    .attr("y", 25)
    .attr("height", 100)
    .attr("width", 100);
  }

  //apply the colors to the map
  var applyColors = function(svg, color, divs)
  {
    var colors = colorDivs(color, divs);
    for (var i = colors.length - 1; i >= 0; i--) 
    {
      d3.selectAll("q" + i + "-" + div).style("fill", "rgb("+colors[i][0] + "," +
                                                colors[i][1] + "," +
                                                colors[i][2] + ")");

    }
  }
  var start = function() {
    
    var onSuccess = function(data) {
      var dataPoints = MapperBack.processPoints(data);

      //may want to abstract this into another method (createQuantize or something)
      var quantize = MapperBack.createQuanitize([10,10,100], 10, dataPoints);

      var width = 870,
        height = 505;

      var rateById = d3.map();
      
      for (var i = 0; i < dataPoints.length; i++) {
        var location = parseInt(dataPoints[i].location) / 1000 //why is 1000 hardcoded in
        rateById.set(location, dataPoints[i].value);
      }

      var svg = MapperBack.drawUSA("state", "#canvas")
      addLegend(svg);
      addTitle(svg);
      applyColors(svg,[10,10,100], 10);

      d3.select(self.frameElement).style("height", height + "px");
    };
    var onFailure = function() { 
      console.error('fail'); 
    }
    makeGetRequest(apiUrl, onSuccess, onFailure);

  };

  // PUBLIC METHODS
  // any private methods returned in the hash are accessible via Smile.key_name, e.g. Smile.start()
  return {
    start: start,
    submitClickHandler: submitClickHandler,
    startAutocomplete: startAutocomplete,
  };
})();

